/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/router';

import '@ionic/core';

import { askPage as AskPage } from './components/ask-page/ask-page';

interface HTMLAskPageElement extends AskPage, HTMLElement {
}
declare var HTMLAskPageElement: {
  prototype: HTMLAskPageElement;
  new (): HTMLAskPageElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ask-page": HTMLAskPageElement;
  }
  interface ElementTagNameMap {
      "ask-page": HTMLAskPageElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ask-page": JSXElements.AskPageAttributes;
      }
  }
  namespace JSXElements {
      export interface AskPageAttributes extends HTMLAttributes {
        
          match?: any,
          history?: any
      }
  }
}

import { CommentsList as CommentsList } from './components/comments-list/comments-list';

interface HTMLCommentsListElement extends CommentsList, HTMLElement {
}
declare var HTMLCommentsListElement: {
  prototype: HTMLCommentsListElement;
  new (): HTMLCommentsListElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "comments-list": HTMLCommentsListElement;
  }
  interface ElementTagNameMap {
      "comments-list": HTMLCommentsListElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "comments-list": JSXElements.CommentsListAttributes;
      }
  }
  namespace JSXElements {
      export interface CommentsListAttributes extends HTMLAttributes {
        
          commentList?: any
      }
  }
}

import { CommentsPage as CommentsPage } from './components/comments-page/comments-page';

interface HTMLCommentsPageElement extends CommentsPage, HTMLElement {
}
declare var HTMLCommentsPageElement: {
  prototype: HTMLCommentsPageElement;
  new (): HTMLCommentsPageElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "comments-page": HTMLCommentsPageElement;
  }
  interface ElementTagNameMap {
      "comments-page": HTMLCommentsPageElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "comments-page": JSXElements.CommentsPageAttributes;
      }
  }
  namespace JSXElements {
      export interface CommentsPageAttributes extends HTMLAttributes {
        
          match?: any,
          history?: any,
          loadingCtrl?: any
      }
  }
}

import { IonicHn as IonicHn } from './components/ionic-hn/ionic-hn';

interface HTMLIonicHnElement extends IonicHn, HTMLElement {
}
declare var HTMLIonicHnElement: {
  prototype: HTMLIonicHnElement;
  new (): HTMLIonicHnElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ionic-hn": HTMLIonicHnElement;
  }
  interface ElementTagNameMap {
      "ionic-hn": HTMLIonicHnElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ionic-hn": JSXElements.IonicHnAttributes;
      }
  }
  namespace JSXElements {
      export interface IonicHnAttributes extends HTMLAttributes {
        
      }
  }
}

import { jobsPage as JobsPage } from './components/jobs-page/jobs-page';

interface HTMLJobsPageElement extends JobsPage, HTMLElement {
}
declare var HTMLJobsPageElement: {
  prototype: HTMLJobsPageElement;
  new (): HTMLJobsPageElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "jobs-page": HTMLJobsPageElement;
  }
  interface ElementTagNameMap {
      "jobs-page": HTMLJobsPageElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "jobs-page": JSXElements.JobsPageAttributes;
      }
  }
  namespace JSXElements {
      export interface JobsPageAttributes extends HTMLAttributes {
        
          match?: any,
          history?: any
      }
  }
}

import { NewsPage as ListContainer } from './components/list-container/list-container';

interface HTMLListContainerElement extends ListContainer, HTMLElement {
}
declare var HTMLListContainerElement: {
  prototype: HTMLListContainerElement;
  new (): HTMLListContainerElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "list-container": HTMLListContainerElement;
  }
  interface ElementTagNameMap {
      "list-container": HTMLListContainerElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "list-container": JSXElements.ListContainerAttributes;
      }
  }
  namespace JSXElements {
      export interface ListContainerAttributes extends HTMLAttributes {
        
          pageNum?: number,
          type?: any,
          loadingCtrl?: any
      }
  }
}

import { NewsPage as NewsPage } from './components/news-page/news-page';

interface HTMLNewsPageElement extends NewsPage, HTMLElement {
}
declare var HTMLNewsPageElement: {
  prototype: HTMLNewsPageElement;
  new (): HTMLNewsPageElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "news-page": HTMLNewsPageElement;
  }
  interface ElementTagNameMap {
      "news-page": HTMLNewsPageElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "news-page": JSXElements.NewsPageAttributes;
      }
  }
  namespace JSXElements {
      export interface NewsPageAttributes extends HTMLAttributes {
        
          match?: any,
          history?: any
      }
  }
}

import { ShowPage as ShowPage } from './components/show-page/show-page';

interface HTMLShowPageElement extends ShowPage, HTMLElement {
}
declare var HTMLShowPageElement: {
  prototype: HTMLShowPageElement;
  new (): HTMLShowPageElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "show-page": HTMLShowPageElement;
  }
  interface ElementTagNameMap {
      "show-page": HTMLShowPageElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "show-page": JSXElements.ShowPageAttributes;
      }
  }
  namespace JSXElements {
      export interface ShowPageAttributes extends HTMLAttributes {
        
          match?: any,
          history?: any
      }
  }
}

import { StoryList as StoryList } from './components/story-list/story-list';

interface HTMLStoryListElement extends StoryList, HTMLElement {
}
declare var HTMLStoryListElement: {
  prototype: HTMLStoryListElement;
  new (): HTMLStoryListElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "story-list": HTMLStoryListElement;
  }
  interface ElementTagNameMap {
      "story-list": HTMLStoryListElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "story-list": JSXElements.StoryListAttributes;
      }
  }
  namespace JSXElements {
      export interface StoryListAttributes extends HTMLAttributes {
        
          stories?: any
      }
  }
}

