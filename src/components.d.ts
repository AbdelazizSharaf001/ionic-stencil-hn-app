/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/router';

import '@ionic/core';

import {
  RouterHistory,
} from '@stencil/router';

import {
  askPage as AskPage
} from './components/ask-page/ask-page';

declare global {
  interface HTMLAskPageElement extends AskPage, HTMLElement {
  }
  var HTMLAskPageElement: {
    prototype: HTMLAskPageElement;
    new (): HTMLAskPageElement;
  };
  interface HTMLElementTagNameMap {
    "ask-page": HTMLAskPageElement;
  }
  interface ElementTagNameMap {
    "ask-page": HTMLAskPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ask-page": JSXElements.AskPageAttributes;
    }
  }
  namespace JSXElements {
    export interface AskPageAttributes extends HTMLAttributes {
      history?: RouterHistory;
      match?: any;
    }
  }
}


import {
  CommentsList as CommentsList
} from './components/comments-list/comments-list';

declare global {
  interface HTMLCommentsListElement extends CommentsList, HTMLElement {
  }
  var HTMLCommentsListElement: {
    prototype: HTMLCommentsListElement;
    new (): HTMLCommentsListElement;
  };
  interface HTMLElementTagNameMap {
    "comments-list": HTMLCommentsListElement;
  }
  interface ElementTagNameMap {
    "comments-list": HTMLCommentsListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "comments-list": JSXElements.CommentsListAttributes;
    }
  }
  namespace JSXElements {
    export interface CommentsListAttributes extends HTMLAttributes {
      commentList?: any;
    }
  }
}


import {
  CommentsPage as CommentsPage
} from './components/comments-page/comments-page';

declare global {
  interface HTMLCommentsPageElement extends CommentsPage, HTMLElement {
  }
  var HTMLCommentsPageElement: {
    prototype: HTMLCommentsPageElement;
    new (): HTMLCommentsPageElement;
  };
  interface HTMLElementTagNameMap {
    "comments-page": HTMLCommentsPageElement;
  }
  interface ElementTagNameMap {
    "comments-page": HTMLCommentsPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "comments-page": JSXElements.CommentsPageAttributes;
    }
  }
  namespace JSXElements {
    export interface CommentsPageAttributes extends HTMLAttributes {
      history?: RouterHistory;
      match?: any;
    }
  }
}


import {
  IonicHn as IonicHn
} from './components/ionic-hn/ionic-hn';

declare global {
  interface HTMLIonicHnElement extends IonicHn, HTMLElement {
  }
  var HTMLIonicHnElement: {
    prototype: HTMLIonicHnElement;
    new (): HTMLIonicHnElement;
  };
  interface HTMLElementTagNameMap {
    "ionic-hn": HTMLIonicHnElement;
  }
  interface ElementTagNameMap {
    "ionic-hn": HTMLIonicHnElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ionic-hn": JSXElements.IonicHnAttributes;
    }
  }
  namespace JSXElements {
    export interface IonicHnAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  jobsPage as JobsPage
} from './components/jobs-page/jobs-page';

declare global {
  interface HTMLJobsPageElement extends JobsPage, HTMLElement {
  }
  var HTMLJobsPageElement: {
    prototype: HTMLJobsPageElement;
    new (): HTMLJobsPageElement;
  };
  interface HTMLElementTagNameMap {
    "jobs-page": HTMLJobsPageElement;
  }
  interface ElementTagNameMap {
    "jobs-page": HTMLJobsPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "jobs-page": JSXElements.JobsPageAttributes;
    }
  }
  namespace JSXElements {
    export interface JobsPageAttributes extends HTMLAttributes {
      history?: RouterHistory;
      match?: any;
    }
  }
}


import {
  NewsPage as ListContainer
} from './components/list-container/list-container';

declare global {
  interface HTMLListContainerElement extends ListContainer, HTMLElement {
  }
  var HTMLListContainerElement: {
    prototype: HTMLListContainerElement;
    new (): HTMLListContainerElement;
  };
  interface HTMLElementTagNameMap {
    "list-container": HTMLListContainerElement;
  }
  interface ElementTagNameMap {
    "list-container": HTMLListContainerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "list-container": JSXElements.ListContainerAttributes;
    }
  }
  namespace JSXElements {
    export interface ListContainerAttributes extends HTMLAttributes {
      pageNum?: number;
      type?: string;
    }
  }
}


import {
  NewsPage as NewsPage
} from './components/news-page/news-page';

declare global {
  interface HTMLNewsPageElement extends NewsPage, HTMLElement {
  }
  var HTMLNewsPageElement: {
    prototype: HTMLNewsPageElement;
    new (): HTMLNewsPageElement;
  };
  interface HTMLElementTagNameMap {
    "news-page": HTMLNewsPageElement;
  }
  interface ElementTagNameMap {
    "news-page": HTMLNewsPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "news-page": JSXElements.NewsPageAttributes;
    }
  }
  namespace JSXElements {
    export interface NewsPageAttributes extends HTMLAttributes {
      history?: RouterHistory;
      match?: any;
    }
  }
}


import {
  ShowPage as ShowPage
} from './components/show-page/show-page';

declare global {
  interface HTMLShowPageElement extends ShowPage, HTMLElement {
  }
  var HTMLShowPageElement: {
    prototype: HTMLShowPageElement;
    new (): HTMLShowPageElement;
  };
  interface HTMLElementTagNameMap {
    "show-page": HTMLShowPageElement;
  }
  interface ElementTagNameMap {
    "show-page": HTMLShowPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "show-page": JSXElements.ShowPageAttributes;
    }
  }
  namespace JSXElements {
    export interface ShowPageAttributes extends HTMLAttributes {
      history?: RouterHistory;
      match?: any;
    }
  }
}


import {
  StoryList as StoryList
} from './components/story-list/story-list';

declare global {
  interface HTMLStoryListElement extends StoryList, HTMLElement {
  }
  var HTMLStoryListElement: {
    prototype: HTMLStoryListElement;
    new (): HTMLStoryListElement;
  };
  interface HTMLElementTagNameMap {
    "story-list": HTMLStoryListElement;
  }
  interface ElementTagNameMap {
    "story-list": HTMLStoryListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "story-list": JSXElements.StoryListAttributes;
    }
  }
  namespace JSXElements {
    export interface StoryListAttributes extends HTMLAttributes {
      stories?: any;
    }
  }
}

